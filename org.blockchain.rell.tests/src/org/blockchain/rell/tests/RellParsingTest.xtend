/*
 * generated by Xtext 2.14.0
 */
package org.blockchain.rell.tests

import com.google.inject.Inject
import org.blockchain.rell.rell.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(RellInjectorProvider)
class RellParsingTest {
	@Inject
	extension ParseHelper<Model> parseHelper
	@Inject extension ValidationTestHelper

// Read object attributes
	@Test	
	def void testReadObjectAtributes() {
		assertParsingTrue('''
			object obj {
			    k : pubkey = x'e04fd020ea3a6910a2d808002b30309d';
			    mutable value : integer = 0;
			    mutable text : text = 'text';
			    mutable active : boolean = true; 
			}
			
			query get_obj_k() = obj.k;
			query get_obj_value() = obj.value;
			query get_obj_text() = obj.text;
			query get_obj_active() = obj.active;
		''')
	}

// check add, addAll set 
//	@Test
	def void testSetAdd() {
		assertParsingTrue('''
			query q1() { val x = set<integer>(); x.add(123); return ''+x; }
			query q2() { val x = set<integer?>(); x.add(null); return ''+x; }
			query q3() { val x = set<integer?>(); x.add(123); return ''+x; }
			query q4() { val x = set([1, 2, 3]); val r = x.addAll(set<integer>()); return r+' '+x; }
			query q5() { val x = set([1, 2, 3]); val r = x.addAll(list<integer>()); return r+' '+x; }
			query q6() { val x = set([1, 2, 3]); val r = x.addAll(set<integer>([1, 2, 3])); return r+' '+x; }
			query q7() { val x = set([1, 2, 3]); val r = x.addAll(list<integer>([1, 2, 3])); return r+' '+x; }
			query q8() { val x = set([1, 2, 3]); val r = x.addAll(set<integer>([3, 4, 5])); return r+' '+x; }
			query q9() { val x = set([1, 2, 3]); val r = x.addAll(list<integer>([3, 4, 5])); return r+' '+x; }
			query q10() { val x = set([1, 2, 3]); val r = x.addAll([4, 5, 6]); return r+' '+x; }
		''')
	}

// check map with class
	@Test
	def void testMapWithClass() {
		assertParsingTrue('''
			class company { name: text; }
			class user { firstName: text; lastName: text; company; }
			query q() {  return user @ { .firstName == 'Bill' } (=.lastName, '' + map([123:'Hello'])); }
		''')
	}
	
// check limit
	@Test
	def void testLimit() {
		assertParsingTrue('''
			class company { name: text; }
			class user { firstName: text; lastName: text; company; }
						
			query q1() = user @* {} limit 0 ; 
			query q2() = user @* {} limit 1 ; 
			query q3() = user @* {} ( .lastName ) limit 0 ; 
			query q4() = user @* {} ( .lastName ) limit 10 ; 
		''')
	}
	
// check sort (java.lang.NullPointerException error)
	@Test
	def void testSort() {
		assertParsingTrue('''
			class company { name: text; }
			class user { firstName: text; lastName: text; company; }

			query q1() = '' + user @* {} ( sort .firstName ) ; 
			query q2() = '' + user @* {} ( -sort .firstName ) ; 
			query q3() = '' + user @* { .company.name == 'Apple' } ( sort =.firstName, sort =.lastName ) ; 
			query q4() = '' + user @* { .company.name == 'Apple' } ( sort =.firstName, -sort =.lastName ) ; 
			query q5() = '' + user @* {} ( sort =.company.name, =.lastName ) ; 
			query q6() = '' + user @* {} ( sort =.company.name, sort =.lastName ) ; 
			query q7() = '' + user @* {} ( -sort user ) ; 
			query q8() = '' + user @* {} ( -sort =.company, =user ) ;
		''')
	}
	
	@Test
	def void testAlias() {
		assertParsingTrue('''
			class company { name: text; }
			class user { firstName: text; lastName: text; company; }

			query q1() = (company: user, user: company) @ { company.firstName == 'Mark', user.name == 'Microsoft' } ;
			query q2() = (user) @ { user.firstName == 'Bill' } ;
		''')
	}
	
	// check '=.' in what part
	@Test 
	def void testAssignOperatorInWhatPart() {
		assertParsingTrue('''
			class company { name: text; }
			class user { firstName: text; lastName: text; company; }

			query q1() = user @ { .firstName == 'Bill' } (=.lastName, '' + (123,'Hello')) ; 
			query q2() = user @ { .firstName == 'Bill' } (=.lastName, '' + list([1,2,3])) ; 
			query q3() = user @ { .firstName == 'Bill' } (=.lastName, '' + set([1,2,3])) ; 
			query q4() = user @ { .firstName == 'Bill' } (=.lastName, '' + map([123:'Hello'])) ;
		''')
	}
	
	// 'companyName' variable as part of company attribute in user class
	@Test 
	def void testBuilkAssignOperatorInWhatPart() {
		assertParsingTrue('''
			class company { name: text; }
			class user { firstName: text; lastName: text; company; }
			
			query q1() { val t = user @ { .firstName == 'Bill' } ( .firstName, .lastName, companyName = .company.name ); return t.firstName; }
			query q2() { val t = user @ { .firstName == 'Bill' } ( .firstName, .lastName, companyName = .company.name ); return t.lastName; }
			query q3() { val t = user @ { .firstName == 'Bill' } ( .firstName, .lastName, companyName = .company.name ); return t.companyName; }
		''')
	}

	def void assertParsingTrue(String codeSnippet) {
		val result = parseHelper.parse(codeSnippet)
		Assert.assertNotNull(result);
		Assert.assertNotNull(result.eResource)
		Assert.assertNotNull(result.eResource.errors)
		val errors = result.eResource.errors

		Assert.assertTrue( '''Unexpected errors: «errors.join(", ")»''', errors.empty)

		result.assertNoErrors
	}

}
