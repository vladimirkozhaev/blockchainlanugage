grammar org.blockchain.rell.Rell with org.eclipse.xtext.common.Terminals

generate rell "http://www.blockchain.org/rell/Rell"

Model:
	entities+=ClassDefinition*
	operations+=(Operation | Query | Function)*;

ClassDefinition:
	('class' | 'record' | 'object') name=ID ('extends' superType=[ClassDefinition])? LEFT_BRACE
	attributeListField+=AttributeListField*
	RIGHT_BRACE;

AttributeListField:
	mutable=Mutable? key=Key? index=Index? attributeList+=RelAttrubutesList ';';

Operation:
	"operation" name=ID LEFT_BRACKET parameters=RelAttrubutesList? RIGHT_BRACKET LEFT_BRACE statements+=Statement*
	('return'
	returnExr=Expression ';')? RIGHT_BRACE;

Query:
	"query" name=ID LEFT_BRACKET parameters=RelAttrubutesList? RIGHT_BRACKET
	(DOUBLE_QUOTE type=TypeReference)?
	((ASSIGNMENT returnExr=Expression ';') |
	(LEFT_BRACE
	statements+=Statement*
	(('return' returnExr=Expression ';')?)
	RIGHT_BRACE));

Function:
	"function" name=ID LEFT_BRACKET parameters=RelAttrubutesList? RIGHT_BRACKET
	(DOUBLE_QUOTE type=TypeReference QuestionChar?)?
	((ASSIGNMENT returnExr=Expression ';') |
	(LEFT_BRACE
	statements+=Statement*
	(('return' returnExr=Expression ';')?)
	RIGHT_BRACE));

Statement:
	(relation=Relational | variable=OperationVariable | varInitiation=VarInitiation | methodCall=DotValue) ';';

VarInitiation:
	name=Expression ASSIGNMENT
	expression=Expression;

OperationVariable:
	assessModificator=(Var | Val) variable=Variable;

Variable:
	name=VariableDeclaration ((ASSIGNMENT expression=Expression)?);

Relational:
	AtOperator | Update | Delete | Create;

Update:
	'update' (tableNameWithAlias+=TableNameWithAlias | LEFT_BRACKET tableNameWithAlias+=TableNameWithAlias (','
	tableNameWithAlias+=TableNameWithAlias)* RIGHT_BRACKET) ((Ampersand LEFT_BRACE ((conditions+=Expression (','
	conditions+=Expression)*)?) RIGHT_BRACE)?) LEFT_BRACKET
	createWhatPart+=CreateWhatPart (','
	createWhatPart+=CreateWhatPart)*
	RIGHT_BRACKET;

Delete:
	'delete' (tableNameWithAlias+=TableNameWithAlias | LEFT_BRACKET tableNameWithAlias+=TableNameWithAlias (','
	tableNameWithAlias+=TableNameWithAlias)* RIGHT_BRACKET) Ampersand LEFT_BRACE conditions+=Expression (','
	conditions+=Expression)* RIGHT_BRACE;

Create:
	'create' (tableNameWithAlias+=TableNameWithAlias | LEFT_BRACKET tableNameWithAlias+=TableNameWithAlias (','
	tableNameWithAlias+=TableNameWithAlias)* RIGHT_BRACKET) LEFT_BRACKET (createWhatPart+=CreateWhatPart (','
	createWhatPart+=CreateWhatPart)*)? RIGHT_BRACKET;

	//There are problem with record part. So will check it in the validatiie
CreateClassPart:
	(entity=[ClassDefinition]) LEFT_BRACKET (createWhatPart+=CreateWhatPart (','
	createWhatPart+=CreateWhatPart)*)? RIGHT_BRACKET;

CreateWhatPart:
	(ASSIGNMENT? DOT? varDeclRef=VariableDeclarationRef (ASSIGNMENT | PLUS_ASSGIN | MINUS_ASSGIN | DIV_ASSGIN |
	MUL_ASSGIN))?
	condition+=Expression;

AtOperator:
	(tableNameWithAlias+=TableNameWithAlias |
	(LEFT_BRACKET
	tableNameWithAlias+=TableNameWithAlias (',' tableNameWithAlias+=TableNameWithAlias)*
	RIGHT_BRACKET))
	Ampersand
	(ampersandModificator=AmpersandModificator?)
	LEFT_BRACE
	(ASSIGNMENT? conditions+=Expression (',' ASSIGNMENT? conditions+=Expression)*)?
	RIGHT_BRACE
	(tupleValue=TupleValue?);

TupleValue:
	LEFT_BRACKET members+=TupleValueMember (',' tuplePart+=TupleValueMember)* RIGHT_BRACKET;

ListCreation:
	LEFT_SQUARE_BRACE arguments=Arguments RIGHT_SQUARE_BRACE (DOT EMBEDDED_METHOD
	listMethodArguments+=ArgumentsInBrackets)*;

MapCreation:
	LEFT_SQUARE_BRACE mapPart+=MapCreationPart (',' mapPart+=MapCreationPart)* RIGHT_SQUARE_BRACE;

TupleValueMember:
	(name=ValuableID ASSIGNMENT)? value=Expression;

ClassMemberDefinition:
	(classRef=[TableNameWithAlias])? DOT (variableDeclarationRef=VariableDeclarationRef);

TableNameWithAlias:
	classRefDecl=ClassRefDecl |
	justNameDecl=JustNameDecl;

ClassRefDecl:
	name=ID DOUBLE_QUOTE classDef=[ClassDefinition];

JustNameDecl:
	name=[ClassDefinition];

VariableDeclarationRef:
	name=[VariableDeclaration|ValuableID];

MethodCall:
	name=MethodName ((listSpec=ListSpecification | mapSpec=MapSpecification)?) arguments=ArgumentsInBrackets;

OperationQueryOFunctionCall:
	(name=[Query] | name=[Operation] | name=[Function])  arguments=ArgumentsInBrackets;

Arguments:
	listPart+=Expression (',' listPart+=Expression)*;

ArgumentsInBrackets:
	LEFT_BRACKET arguments=Arguments? RIGHT_BRACKET;

MethodName:
	EMBEDDED_METHOD;

AccessToList:
	LEFT_SQUARE_BRACE expr=Expression RIGHT_SQUARE_BRACE;

Expression:
	or=Or;

Or returns Expression:
	And ({Or.left=current} "or" right=And)*;

And returns Expression:
	Equality ({And.left=current} "and" right=Equality)*;

Equality returns Expression:
	Comparison ({Equality.left=current} op=(EQUALS | NOT_EQUALS | EQUALSS | NOT_EQUALSS)
	right=Comparison)*;

Comparison returns Expression:
	PlusOrMinus ({Comparison.left=current} op=(MORE_EQUAL | LESS_EQUAL | MORE | LESS | IN)
	right=PlusOrMinus)*;

PlusOrMinus returns Expression:
	MulOrDiv (({Plus.left=current} PlusChar | {Minus.left=current} MinusChar)
	right=MulOrDiv)*;

MulOrDiv returns Expression:
	Primary ({MulOrDiv.left=current} op=(MulChar | DivChar | Percent)
	right=Primary)*;

Primary returns Expression:
	prefixChar=(PlusChar | MinusChar | MulChar | DivChar | NOT) expression=Primary
	| DotValue;

DotValue:
	((LEFT_BRACKET expr=Expression RIGHT_BRACKET) | atom=Atomic) (accesToList=AccessToList?) ((DOT dotPart=DotValue)?);

Atomic returns Expression:
	{IntConstant} value=IntWithMinus
	| {StringConstant} value=STRING |
	{ByteArrayConstant} value=BYTE_ARRAY_VALUE |
	{BoolConstant} value=('true' | 'false') |
	{SelectOp} value=AtOperator |
	{CreateAtom} value=Create
	| {TupleRes} value=TupleValue
	| {ListCreation} value=ListCreation
	| {MapCreation} value=MapCreation
	| {TheNull} value=NULL
	| {OneParamMethodCall} value=OneParamMethodCall
	| {TwoParamsMethodCall} value=TwoParamsMethodCall
	| {MultiParamsMethodCall} value=MultiParamsMethodCall
	| {MethodCall} value=MethodCall
	| {OperationQueryOFunctionCall} value=OperationQueryOFunctionCall
	| {CreateClassPart} value=CreateClassPart
	| {ClassMemberDef} value=ClassMemberDefinition
	| {VariableDeclarationRef} value=VariableDeclarationRef;

MapCreationPart:
	exprKey=Expression DOUBLE_QUOTE exprValue=Expression;

RelAttrubutesList:
	value+=Variable (',' value+=Variable)*;

VariableDeclaration:
	name=ValuableID ((DOUBLE_QUOTE type=TypeReference)?);

TupleVarDeclaration:
	(name=ValuableID DOUBLE_QUOTE)? type=TypeReference;

TypeReference:
	type=PrimitiveType | entityType=[ClassDefinition] | tuple=TupleType | list=ListType | set=SetType | map=MapType;

ListType:
	List ListSpecification;

SetType:
	Set ListSpecification;

MapType:
	Map MapSpecification;

ListSpecification:
	LESS listType=TypeReference (QuestionChar?) MORE (QuestionChar?);

MapSpecification:
	LESS keySpec=TypeReference (QuestionChar?) ',' valSpec=TypeReference (QuestionChar?) MORE;

TupleType:
	LEFT_BRACKET varDecl+=TupleVarDeclaration (',' varDecl+=TupleVarDeclaration)* RIGHT_BRACKET;

OneParamMethodCall:
	methodName=ONE_PARAM_METHOD LEFT_BRACKET arg=Expression RIGHT_BRACKET;

TwoParamsMethodCall:
	methodName=TWO_PARAMS_METHOD LEFT_BRACKET arg1=Expression ',' arg2=Expression RIGHT_BRACKET;

MultiParamsMethodCall:
	methodName=MULTI_PARAMS_METHOD args=ArgumentsInBrackets;

PrimitiveType:
	Text | Tuid | Pubkey | Name | Timestamp | Integer | Json | ByteArray | Boolean;

ValuableID:
	PrimitiveType | ID;

AmpersandModificator:
	PlusChar | MulChar | QuestionChar;

IntWithMinus:
	MinusChar? INT;

Name:
	'name';

Pubkey:
	'pubkey';

Timestamp:
	'timestamp';

Tuid:
	'tuid';

Boolean:
	'boolean';

Json:
	'json';

Integer:
	'integer';

Text:
	'text';

ByteArray:
	'byte_array';

List:
	'list';

Map:
	'map';

Set:
	'set';

Key:
	'key';

Index:
	'index';

Mutable:
	'mutable';

Var:
	'var';

Val:
	'val';

Ampersand:
	'@';

QuestionChar:
	'?';

PlusChar:
	'+';

MinusChar:
	'-';

MulChar:
	'*';

DivChar:
	'/';

Percent:
	'%';

EMBEDDED_METHOD:
	"add" | "addAll" | "contains" | "containsAll" | "removeAll" | "calculate" | "sub" | "size" |
	"removeAt" | "clear" | "requireNotEmpty" | "upperCase" | "lowerCase" | "_map" | "map" | "_list" | "list" | "set" |
	"_set" | "empty" | "get" |
	"str" | "put" | "putAll" | "remove" | "keys" | "values";

ONE_PARAM_METHOD:
	'abs' | 'is_signer' | 'json';

TWO_PARAMS_METHOD:
	'max' | 'min';

MULTI_PARAMS_METHOD:
	'log' | 'print';

terminal IN:
	'in';

terminal RIGHT_SQUARE_BRACE:
	']';

terminal LEFT_SQUARE_BRACE:
	'[';

terminal RIGHT_BRACE:
	'}';

terminal LEFT_BRACE:
	'{';

terminal RIGHT_BRACKET:
	')';

terminal LEFT_BRACKET:
	'(';

terminal NOT:
	'not';

terminal ASSIGNMENT:
	'=';

terminal DIV_ASSGIN:
	'/=';

terminal MUL_ASSGIN:
	'*=';

terminal PLUS_ASSGIN:
	'+=';

terminal MINUS_ASSGIN:
	'-=';

terminal EQUALS:
	'==';

terminal EQUALSS:
	'===';

terminal NOT_EQUALS:
	'!=';

terminal NOT_EQUALSS:
	'!==';

terminal MORE_EQUAL:
	'>=';

terminal LESS_EQUAL:
	'<=';

terminal MORE:
	'>';

terminal LESS:
	'<';

terminal DOUBLE_QUOTE:
	':';

terminal NULL:
	'null';

terminal DOT:
	'.';

terminal BYTE_ARRAY_CHAR:
	'0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'A' | 'B' | 'C' | 'D'
	| 'E' | 'F';

terminal BYTE_ARRAY_PAIR:
	BYTE_ARRAY_CHAR BYTE_ARRAY_CHAR;

terminal BYTE_ARRAY_VALUE:
	'x' (('\'' BYTE_ARRAY_PAIR* '\'') | ('"' BYTE_ARRAY_PAIR* '"'));

